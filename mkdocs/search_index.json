{
    "docs": [
        {
            "location": "/", 
            "text": "Angular Drag and Drop\n\n\nA Native ( without jquery ) Drag and Drop directive for AngularJS using HTML5 Drag and Drop\n\n\n\n\nui-draggable(expression)\n\n\nDirective in module ang-drag-drop (since 1.0.5 - old module name ngDragDrop)\n\n\nThe ui-draggable attribute tells Angular that the element is draggable. ui-draggable takes an expression as the attribute value. The expression should evaluate to either true or false. You can toggle the draggability of an element using this expression.\n\n\nAdditional Attributes\n\n\ndrag\n(variable)\n\n\nThe class used to mark child elements of draggable object to be used as drag handle. Default class name is \ndrag-handle\n\n\nNOTE\n: If attribute is not present drag handle feature is not active.\n\n\ndrag-handle-class\n(string)\n\n\nThe \ndrag\n property is used to assign the data that needs to be passed along with the dragging element.\n\n\non-drop-success\n(function)\n\n\nThe \non-drop-success\n attribute takes a function. We can consider this to be an on-drop-success handler function. This can be useful if you need to do some post processing after the dragged element is dropped successfully on the drop site.\n\n\nNOTE\n: This callback function is only called when the drop succeeds.\nYou can request the \ndrag-end\n event ( very similiar to requesting the click event in \nng-click\n ) by passing \n$event\n in the event handler.\n\n\non-drop-failure\n(function)\n\n\nThe \non-drop-failure\n attribute takes a function. We can consider this to be an on-drop-failure handler function. This can be useful if you need to do some post processing after the dragged element is dropped unsuccessfully on any drop site.\n\n\nNOTE\n: This callback function is only called when the drop fails.\nYou can request the \ndrag-end\n event ( very similiar to requesting the click event in \nng-click\n ) by passing \n$event\n in the event handler.\n\n\ndrag-channel\n(string)\n\n\nThe \non-drop-failure\n attribute takes a function. We can consider this to be an on-drop-failure handler function. This can be useful if you need to do some post processing after the dragged element is dropped unsuccessfully on any drop site.\n\n\nNOTE\n: This callback function is only called when the drop fails.\nYou can request the \ndrag-end\n event ( very similiar to requesting the click event in \nng-click\n ) by passing \n$event\n in the event handler.\n\n\nUsage\n\n\nEvents\n\n\nOn start of dragging an Angular Event \nANGULAR_DRAG_START\n is dispatched from the \n$rootScope\n. The event also carries carries the information about the channel in which the dragging has started.\n\n\nOn end of dragging an Angular Event \nANGULAR_DRAG_END\n is dispatched from the \n$rootScope\n. The event also carries carries the information about the channel in which the dragging has started.\n\n\nWhen hovering a draggable element on top of a drop area an Angular Event \nANGULAR_HOVER\n is dispatched from the \n$rootScope\n. The event also carries the information about the channel in which the dragging has started.\n\n\n\n\nui-on-drop(expression)\n\n\nDirective in module ang-drag-drop (since 1.0.5 - old module name ngDragDrop)\n\n\nThe \nui-on-drop\n attribute tells Angular that the element is a drop site. \nui-on-drop\n takes a function as the attribute value. The function will be called when a valid dragged element is dropped in that location. A valid dragged element is one which has the same channel as the drop location.\n\n\nNOTE\n : This callback function is only called when the drop succeeds.\nThe \nui-on-drop\n callback can request additional parameters. The data that is dragged is available to the callback as $data and its channel as \n$channel\n. Apart from this the drop event is exposed as \n$event\n.\n\n\nAdditional Attributes\n\n\ndrop-channel\n(variable)\n\n\nThe channel that the drop site accepts. The dragged element should have the same channel as this drop site for it to be droppable at this location. It is possible to provide comma separated list of channels.\n\n\nNOTE\n: Also special value of \ndrag-channel\n attribute is available to accept dragged element with any channel value \u2014 *\n\n\ndrop-validate\n(function)\n\n\nExtra validation that makes sure that the drop site accepts the dragged element beyond having the same channel. If not defined, no extra validation is made.\n\n\nNOTE\n: This callback function is called only if the channel condition is met, when the element starts being dragged\n\n\ndrag-enter-class\n(string)\n\n\nThe class that will be added to the the droppable element when a dragged element ( which is droppable ) enters the drop location. The default value for this is \non-drag-enter\n\n\ndrag-hover-class\n(string)\n\n\nThe class that will be added to the drop area element when hovering with an element. The default value for this is \non-drag-hover\n\n\nUsage\n\n\nEvents\n\n\nOn start of dragging an Angular Event \nANGULAR_DRAG_START\n is dispatched from the \n$rootScope\n. The event also carries carries the information about the channel in which the dragging has started.\n\n\nOn end of dragging an Angular Event \nANGULAR_DRAG_END\n is dispatched from the \n$rootScope\n. The event also carries carries the information about the channel in which the dragging has started.\n\n\nWhen hovering a draggable element on top of a drop area an Angular Event \nANGULAR_HOVER\n is dispatched from the \n$rootScope\n. The event also carries the information about the channel in which the dragging has started.", 
            "title": "Home"
        }, 
        {
            "location": "/#angular-drag-and-drop", 
            "text": "A Native ( without jquery ) Drag and Drop directive for AngularJS using HTML5 Drag and Drop", 
            "title": "Angular Drag and Drop"
        }, 
        {
            "location": "/#ui-draggableexpression", 
            "text": "Directive in module ang-drag-drop (since 1.0.5 - old module name ngDragDrop)  The ui-draggable attribute tells Angular that the element is draggable. ui-draggable takes an expression as the attribute value. The expression should evaluate to either true or false. You can toggle the draggability of an element using this expression.", 
            "title": "ui-draggable(expression)"
        }, 
        {
            "location": "/#additional-attributes", 
            "text": "", 
            "title": "Additional Attributes"
        }, 
        {
            "location": "/#dragvariable", 
            "text": "The class used to mark child elements of draggable object to be used as drag handle. Default class name is  drag-handle  NOTE : If attribute is not present drag handle feature is not active.", 
            "title": "drag(variable)"
        }, 
        {
            "location": "/#drag-handle-classstring", 
            "text": "The  drag  property is used to assign the data that needs to be passed along with the dragging element.", 
            "title": "drag-handle-class(string)"
        }, 
        {
            "location": "/#on-drop-successfunction", 
            "text": "The  on-drop-success  attribute takes a function. We can consider this to be an on-drop-success handler function. This can be useful if you need to do some post processing after the dragged element is dropped successfully on the drop site.  NOTE : This callback function is only called when the drop succeeds.\nYou can request the  drag-end  event ( very similiar to requesting the click event in  ng-click  ) by passing  $event  in the event handler.", 
            "title": "on-drop-success(function)"
        }, 
        {
            "location": "/#on-drop-failurefunction", 
            "text": "The  on-drop-failure  attribute takes a function. We can consider this to be an on-drop-failure handler function. This can be useful if you need to do some post processing after the dragged element is dropped unsuccessfully on any drop site.  NOTE : This callback function is only called when the drop fails.\nYou can request the  drag-end  event ( very similiar to requesting the click event in  ng-click  ) by passing  $event  in the event handler.", 
            "title": "on-drop-failure(function)"
        }, 
        {
            "location": "/#drag-channelstring", 
            "text": "The  on-drop-failure  attribute takes a function. We can consider this to be an on-drop-failure handler function. This can be useful if you need to do some post processing after the dragged element is dropped unsuccessfully on any drop site.  NOTE : This callback function is only called when the drop fails.\nYou can request the  drag-end  event ( very similiar to requesting the click event in  ng-click  ) by passing  $event  in the event handler.", 
            "title": "drag-channel(string)"
        }, 
        {
            "location": "/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/#events", 
            "text": "On start of dragging an Angular Event  ANGULAR_DRAG_START  is dispatched from the  $rootScope . The event also carries carries the information about the channel in which the dragging has started.  On end of dragging an Angular Event  ANGULAR_DRAG_END  is dispatched from the  $rootScope . The event also carries carries the information about the channel in which the dragging has started.  When hovering a draggable element on top of a drop area an Angular Event  ANGULAR_HOVER  is dispatched from the  $rootScope . The event also carries the information about the channel in which the dragging has started.", 
            "title": "Events"
        }, 
        {
            "location": "/#ui-on-dropexpression", 
            "text": "Directive in module ang-drag-drop (since 1.0.5 - old module name ngDragDrop)  The  ui-on-drop  attribute tells Angular that the element is a drop site.  ui-on-drop  takes a function as the attribute value. The function will be called when a valid dragged element is dropped in that location. A valid dragged element is one which has the same channel as the drop location.  NOTE  : This callback function is only called when the drop succeeds.\nThe  ui-on-drop  callback can request additional parameters. The data that is dragged is available to the callback as $data and its channel as  $channel . Apart from this the drop event is exposed as  $event .", 
            "title": "ui-on-drop(expression)"
        }, 
        {
            "location": "/#additional-attributes_1", 
            "text": "", 
            "title": "Additional Attributes"
        }, 
        {
            "location": "/#drop-channelvariable", 
            "text": "The channel that the drop site accepts. The dragged element should have the same channel as this drop site for it to be droppable at this location. It is possible to provide comma separated list of channels.  NOTE : Also special value of  drag-channel  attribute is available to accept dragged element with any channel value \u2014 *", 
            "title": "drop-channel(variable)"
        }, 
        {
            "location": "/#drop-validatefunction", 
            "text": "Extra validation that makes sure that the drop site accepts the dragged element beyond having the same channel. If not defined, no extra validation is made.  NOTE : This callback function is called only if the channel condition is met, when the element starts being dragged", 
            "title": "drop-validate(function)"
        }, 
        {
            "location": "/#drag-enter-classstring", 
            "text": "The class that will be added to the the droppable element when a dragged element ( which is droppable ) enters the drop location. The default value for this is  on-drag-enter", 
            "title": "drag-enter-class(string)"
        }, 
        {
            "location": "/#drag-hover-classstring", 
            "text": "The class that will be added to the drop area element when hovering with an element. The default value for this is  on-drag-hover", 
            "title": "drag-hover-class(string)"
        }, 
        {
            "location": "/#usage_1", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/#events_1", 
            "text": "On start of dragging an Angular Event  ANGULAR_DRAG_START  is dispatched from the  $rootScope . The event also carries carries the information about the channel in which the dragging has started.  On end of dragging an Angular Event  ANGULAR_DRAG_END  is dispatched from the  $rootScope . The event also carries carries the information about the channel in which the dragging has started.  When hovering a draggable element on top of a drop area an Angular Event  ANGULAR_HOVER  is dispatched from the  $rootScope . The event also carries the information about the channel in which the dragging has started.", 
            "title": "Events"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Installation\n\n\nDownload\n\n\nDownload the file \ndraganddrop.min.js\n or \ndraganddrop.js\n.\n\n\nBower\n\n\nYou can also install via Bower using\n\n\nbower install angular-native-dragdrop --save\n\n\n\n\nUsage\n\n\nStep - 1 \nAdd script\n\n\nscript src=\npath/to/draganddrop.min.js\n/script\n\n\n\n\n\nStep - 2 \nInclude in app\n\n\n    myApp = angular.module('myApp','ang-drag-drop');\n\n\n\n\nStep - 3 \nProfit!!", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/#download", 
            "text": "Download the file  draganddrop.min.js  or  draganddrop.js .", 
            "title": "Download"
        }, 
        {
            "location": "/getting-started/#bower", 
            "text": "You can also install via Bower using  bower install angular-native-dragdrop --save", 
            "title": "Bower"
        }, 
        {
            "location": "/getting-started/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/getting-started/#step-1-add-script", 
            "text": "script src= path/to/draganddrop.min.js /script", 
            "title": "Step - 1 Add script"
        }, 
        {
            "location": "/getting-started/#step-2-include-in-app", 
            "text": "myApp = angular.module('myApp','ang-drag-drop');", 
            "title": "Step - 2 Include in app"
        }, 
        {
            "location": "/getting-started/#step-3-profit", 
            "text": "", 
            "title": "Step - 3 Profit!!"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\nSimple Usage\n\n\n\n\nWith drop validation", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#simple-usage", 
            "text": "", 
            "title": "Simple Usage"
        }, 
        {
            "location": "/examples/#with-drop-validation", 
            "text": "", 
            "title": "With drop validation"
        }
    ]
}